#!/usr/bin/env bash

cat <<'EOF'

#==============================================================================
# Basic Zenlog bash helper functions.
#
# Add the following line to your $HOME/.bashrc file.
#
# . <(zenlog sh-helper)
#==============================================================================

#==============================================================================
# Bash specific.
#==============================================================================

# Zehlog helper command: print the current command's command line for bash.
function zenlog_bash_last_command() {
    # Use echo to remove newlines.
    HISTTIMEFORMAT= history 1 | sed -e 's/^ *[0-9][0-9]* *//'
}

# Zenlog helper command: print the "environment".
# Re-define this function to change what's written to ENV log files.
function zenlog_bash_dump_env() {
    {
        echo "PWD: $(pwd)"
        echo "git HEAD: $(git rev-parse HEAD) $(git rev-parse --abbrev-ref HEAD)"
        env
        # declare -p # Use this instead of env to dump shell variables too.
    } 2>/dev/null
}

# Execute this command in Bash's PS0 to tell zenlog to start logging for a command.
function zenlog_bash_preexec() {
    zenlog start-command -e "$(zenlog_bash_dump_env)" "$(zenlog_bash_last_command)"
}

# Execute this command in Bash's PROMPT_COMMAND to tell zenlog to stop logging for the current command.
function zenlog_bash_postexec() {
    local implicit_status=$?
    local opt=""
    if [[ "$1" == "-n" ]] ; then
        opt="-n"
        shift
    fi

    zenlog end-command $opt "${1:-$implicit_status}"
}

#==============================================================================
# Zsh specific.
#==============================================================================

# Zenlog helper command: print the "environment".
# Re-define this function to change what's written to ENV log files.
function zenlog_zsh_dump_env() {
    {
        echo "PWD: $(pwd)"
        echo "git HEAD: $(git rev-parse HEAD) $(git rev-parse --abbrev-ref HEAD)"
        env
    } 2>/dev/null
}

# Execute this command in Zsh's preexec_functions to tell zenlog to start logging for a command.
function zenlog_zsh_preexec() {
    local cmd="$3" # Current command line.
    zenlog start-command -e "$(zenlog_zsh_dump_env)" "$cmd"
}

# Execute this command in Zsh's precmd_functions to tell zenlog to stop logging for the current command.
function zenlog_zsh_postexec() {
    local implicit_status=$?
    local opt=""
    if [[ "$1" == "-n" ]] ; then
        opt="-n"
        shift
    fi

    zenlog end-command $opt "${1:-$implicit_status}"
}

#==============================================================================
# Generic helper commands.
#==============================================================================

function _zenlog_just_run() { "${@}"; }

# Run a command without logging the output.
alias 184=_zenlog_just_run

# Run a command with forcing log, regardless of ZENLOG_ALWAYS_NO_LOG_COMMANDS.
alias 186=_zenlog_just_run

# If called from the login shell, then close the current zenlog session and restart zenlog.
function zenlog_restart() {
    if zenlog in-zenlog; then
        exit 13
    else
        echo "Not in zenlog." 1>&2
    fi
}

# For backward compatibility.
function zenlog_in_zenlog() { zenlog in-zenlog; }
function in_zenlog() { zenlog in-zenlog; }
function zenlog_current_log() { zenlog current-log "$@"; }
function zenlog_last_log() { zenlog last-log "$@"; }

EOF
